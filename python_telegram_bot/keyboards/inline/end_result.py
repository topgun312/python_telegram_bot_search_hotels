import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, CallbackQuery, Message
from telebot import types
from loader import bot
from keyboards.reply.start_keyboard import markup_1
from botrequest import rapidapi_copy
from telegram_bot_pagination import InlineKeyboardPaginator
from states.hotels_information import Hotel_priceInfo
from database.sqlite_db import sql_add_command
from typing import Optional, Any, List


def count_hotels() -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª–µ–π) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π
    """
    markup_inline = types.InlineKeyboardMarkup(row_width=2)
    item_1 = InlineKeyboardButton(text='3 üè†', callback_data='hotels_count: 3')
    item_2 = InlineKeyboardButton(text='6 üè†', callback_data='hotels_count: 6')
    item_3 = InlineKeyboardButton(text='9 üè†', callback_data='hotels_count: 9')
    item_4 = InlineKeyboardButton(text='12 üè†', callback_data='hotels_count: 12')
    item_5 = InlineKeyboardButton(text='15 üè†', callback_data='hotels_count: 15')
    item_6 = InlineKeyboardButton(text='–í—Å–µ üèò', callback_data='hotels_count: 25')
    markup_inline.add(item_1, item_2, item_3, item_4, item_5, item_6)
    return markup_inline


def answer(call: CallbackQuery) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è).
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    :return: –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    if call.message:
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['hotels_count'] = call.data.split(":")[1]
            hotels = call.data.split(':')[1]

            data_1 = str(data["check_in"]).split('-')
            data_2 = str(data["check_out"]).split('-')
            d_1 = datetime.date(int(data_1[0]), int(data_1[1]), int(data_1[2]))
            d_2 = datetime.date(int(data_2[0]), int(data_2[1]), int(data_2[2]))
            days = d_2 - d_1
            dd = str(days)
            period = dd.split()[0]

            if data['user_command'] in ['/lowprice', 'üîù –î–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π üè†', '/highprice', 'üîù –î–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π üè°']:
                text_low_high = f'<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.</b> \n–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ üó∫: {data["city_loc"]} \n' + \
                       f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π üé≤: {hotels} \n' + \
                       f'–í—ä–µ–∑–¥ ‚û°: {data["check_in"]} \n' + \
                       f'–í—ã–µ–∑–¥ ‚¨Ö: {data["check_out"]} \n' + \
                       f'–í–µ–¥—É –ø–æ–∏—Å–∫...üïµüèª‚Äç‚ôÇ'
                bot.send_message(call.message.chat.id, text_low_high, reply_markup=markup_1, parse_mode='html')
                bot.delete_message(call.message.chat.id, call.message.message_id)
                hotels_info = rapidapi_copy.search_hotels(data)

            elif data['user_command'] in ['/bestdeal', 'üîù –ù–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üèò']:
                text_bst = f'<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.</b> \n–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ üó∫: {data["city_loc"]} \n' + \
                           f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π üé≤: {data["hotels_count"]} \n' + \
                           f'–í—ä–µ–∑–¥ ‚û°: {data["check_in"]} \n' + \
                           f'–í—ã–µ–∑–¥ ‚¨Ö: {data["check_out"]} \n' + \
                           f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ‚¨á: {data["price_min"]} \n' + \
                           f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ‚¨Ü: {data["price_max"]} \n' + \
                           f'–í–µ–¥—É –ø–æ–∏—Å–∫...üïµüèª‚Äç‚ôÇ'
                bot.send_message(call.message.chat.id, text_bst, reply_markup=markup_1, parse_mode='html')
                bot.delete_message(call.message.chat.id, call.message.message_id)
                hotels_info = rapidapi_copy.search_hotels(data)

            for hotel in hotels_info.values():
                info = f' \n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è üè®: {hotel["name"]} \n' + \
                       f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–µ–ª—è üì™: {hotel["loc"]} \n' + \
                       f'–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è üèÜ: {hotel["reviews"]} \n' + \
                       f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ üöï: {round(hotel["landmarks"] * 1.61, 1)} –∫–º \n' + \
                       f'–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏ üí≥: {hotel["price"]} $\n' + \
                       f'–¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è üí∞: {int(hotel["price"]) * int(period)} $'
                bot.send_photo(call.message.chat.id, photo=(f'{hotel["fonfoto"]}'), caption=info,
                               reply_markup=low_high_best_inline(hotel))
                date_time = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                message_db = [data['user_command'], data['city_loc'], hotel['id'], hotel['name'], hotel['fonfoto'],
                              date_time]
                sql_add_command(message_db)

            return hotel


def low_high_best_inline(hotel: int) -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ª–æ–∫–∞—Ü–∏–∏–µ–π, —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ—Ç–µ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª—è.
    :param hotel: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :return: –≤—ã–≤–æ–¥ –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    item_1 = types.InlineKeyboardButton(text='üåç  –ù–∞ Google Maps üìå', url=f'http://maps.google.com/maps?z=12&t=m&q=loc:{hotel["coordinate"]}')
    item_2 = types.InlineKeyboardButton(text='üåê –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É üì≤', url=f'https://www.hotels.com/h{hotel["id"]}.Hotel-information/')
    item_3 = types.InlineKeyboardButton(text='üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üèô', callback_data=f'id:{hotel["id"]}')
    markup.add(item_1, item_2, item_3)
    return markup


def send_photo(call: CallbackQuery) -> Optional[list]:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞.
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :return: —Å–ø–∏—Å–æ–∫ url-–∞–¥—Ä–µ—Å–æ–≤ —Ñ–æ—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è).
    """
    if call.message:
        id_hotel = call.data.split(':')[1]
        images = rapidapi_copy.search_photo_hotel(id_hotel)
        bot.set_state(call.message.from_user.id, Hotel_priceInfo.images, call.message.chat.id)
        with bot.retrieve_data(call.message.from_user.id, call.message.chat.id) as data:
            data['images'] = images
        bot.send_photo(call.message.chat.id, data['images'][0], reply_markup=create_photos_keyboard(len(data['images'])), parse_mode='Markdown')
        return images


def create_photos_keyboard(photos_amount: Any, page: int = 1) -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞.
    :param photos_amount: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.
    :param page: –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    :return: –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    paginator = InlineKeyboardPaginator(photos_amount, current_page=page, data_pattern='picture#{page}')
    paginator.add_after(InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å ‚ùå ', callback_data='back'))
    return paginator.markup


def close_message(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞.
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    bot.delete_message(call.message.chat.id, call.message.message_id)


def show_hotel_photo(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–µ.
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    photo_index = int(call.data.split('#')[1])
    with bot.retrieve_data(call.message.from_user.id, call.message.chat.id) as data:
        photos = data['images']

    send_new_hotel_photo(message=call.message, found_photos=photos, photo_index=photo_index)


def send_new_hotel_photo(message: Message, found_photos: List[str], photo_index: int = 1) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :param found_photos: —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    :param photo_index: –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    bot.edit_message_media(chat_id=message.chat.id,
                               message_id=message.message_id,
                               media=InputMediaPhoto(found_photos[photo_index - 1]),
                               reply_markup=create_photos_keyboard(len(found_photos), page=photo_index))