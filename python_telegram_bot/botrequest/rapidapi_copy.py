import requests
import json
import os
from config_data import config
from requests import Response
from typing import List, Dict, Union
from loguru import logger


headers = {"content-type": "application/json",
           "X-RapidAPI-Key": config.RAPID_API_KEY,
            "X-RapidAPI-Host": config.RAPID_API_HOST}

@logger.catch
def request_func(method_endswith: str, qstring: Dict[str, str])  -> Union[bool, Response]:
    """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö get-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ post-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Hotels API.
        :param url: url-—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        :param qstring: —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ–∏—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞.
        :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç get-–∑–∞–ø—Ä–æ—Å–æ–≤.
        """
    url = f"https://hotels4.p.rapidapi.com/{method_endswith}"
    try:
        if method_endswith == 'locations/v3/search':
            return requests.request("GET", url, headers=headers, params=qstring, timeout=10)
        else:
            return requests.request("POST", url, headers=headers, json=qstring, timeout=10)
    except Exception:
        logger.exception(Exception)
        return False

def search_location(message: str) -> Union[List[Dict[str, str]], bool]:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ Hotels API (rapidapi.com) (–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π (–≥–æ—Ä–æ–¥–æ–≤)).
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Å–≤–µ–¥–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π (–≥–æ—Ä–æ–¥–æ–≤)
    """
    method_endswith = 'locations/v3/search'
    querystring = {"q": message, "locale": "ru_RU", "langid": "1033", "siteid": "300000001"}
    try:
        response = request_func(method_endswith, querystring)
        result = json.loads(response.text)
        cities = list()
        for city in result['sr']:
            city_name = city['regionNames']['fullName'].split(',')[0] + ', ' + city['regionNames']['fullName'].split(',')[-1]
            destination_id = city['essId']['sourceId']
            cities.append({'city_name': city_name, 'destination_id': destination_id})
        return cities
    except Exception:
        logger.exception(Exception)
        return False


def search_hotels(data: Dict[str, str]) -> Union[Dict[str, int], bool]:
    """
        HTTP-–∑–∞–ø—Ä–æ—Å –∫ Hotels API (rapidapi.com) (–∑–∞–ø—Ä–æ—Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ç–µ–ª–µ–π).
        :param data: —Å–ª–æ–≤–∞—Ä—å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞.
        :return: —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤–µ–¥–µ–Ω–∏—è–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª–µ–π).
        """
    if data:
        method_endswith = 'properties/v2/list'
        location, hotels_count, check_in, check_out, adults, childrens = (
                '{location}:{hotels_count}:{check_in}:{check_out}:{adults}:{childrens}'.format(**data).split(':'))
        check_in_data = str(check_in).split('-')
        check_in_day, check_in_month, check_in_year = int(check_in_data[2]), int(check_in_data[1]), int(
            check_in_data[0])
        check_out_data = str(check_out).split('-')
        check_out_day, check_out_month, check_out_year = int(check_out_data[2]), int(check_out_data[1]), int(
            check_out_data[0])
        child_list = []
        childrens_list = [i for i in childrens if i.isdigit()]
        for i in childrens_list:
            if i != '0':
                child_list.append({'age': int(i)})
            else:
                child_list.clear()

        payload = {
            "currency": "USD",
            "eapid": 1,
            "locale": "en_US",
            "siteId": 300000001,
            "destination": {"regionId": location},
            "checkInDate": {
                "day": check_in_day,
                "month": check_in_month,
                "year": check_in_year
            },
            "checkOutDate": {
                "day": check_out_day,
                "month": check_in_month,
                "year": check_in_year
            },
            "rooms": [
                {
                    "adults": int(adults),
                    "children": child_list
                }
            ],
            "resultsStartingIndex": 0,
            "resultsSize": int(hotels_count),
            "sort": "",
            "filters": {"price": {}}
        }

        if data['user_command'] in ['/lowprice', 'üîù –î–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π üè†']:
            price_min = ('{price_min}'.format(**data))
            payload['sort'] = "PRICE_LOW_TO_HIGH"
            payload.update({"price": {"max": int(price_min[0]), "min": 1}})
        elif data['user_command'] in ['/highprice', 'üîù –î–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π üè°']:
            price_max = ('{price_max}'.format(**data))
            payload['sort'] = sorted("PRICE_LOW_TO_HIGH", reverse=True)
            payload.update({"price": {"max": int(price_max[0]), "min": 1}})
        elif data['user_command'] in ['/bestdeal', 'üîù –ù–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üèò']:
            price_min, price_max = ('{price_min}:{price_max}'.format(**data)).split(':')
            payload['sort'] = ["PRICE_LOW_TO_HIGH", "DISTANCE"]
            payload.update({"price": {"max": int(price_max[0]), "min": int(price_min[0])}})

        try:
            response = request_func(method_endswith, payload)
            result = json.loads(response.text)
            parsed = result['data']['propertySearch']['properties']
            hotels_dict = {hotel['id']: {'id': hotel.get('id', '-'),
                                         'name': hotel.get('name', '-'),
                                         'reviews': hotel.get('reviews', {}).get('score', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                                         'loc': hotel['neighborhood'].get('name')
                                         if hotel.get('neighborhood', None) else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                                         'landmarks': hotel['destinationInfo']['distanceFromDestination'].get('value'),
                                         'fonfoto': hotel['propertyImage']['image'].get('url', '-').replace('250', '1280').replace('140', '720')
                                         if hotel.get('propertyImage', None) else
                                         os.path.join('..', 'misc', 'img.png'),
                                         'price': hotel['price']['lead'].get('amount')
                                         if hotel.get('price', None) else 0,
                                         'coordinate': '+'.join(map(str, hotel['mapMarker']['latLong'].values()))}
                           for hotel in parsed}
            return hotels_dict

        except Exception:
            logger.exception(Exception)
            return False


def search_photo_hotel(hotei_id):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ Hotels API (rapidapi.com) (–ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ).
    :param hotel_id: id –æ—Ç–µ–ª—è.
    :return: —Å–ø–∏—Å–æ–∫ url-–∞–¥—Ä–µ—Å–æ–≤ —Ñ–æ—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è)
    """
    method_endswith = 'properties/v2/detail'
    payload = {
        "currency": "USD",
        "eapid": 1,
        "locale": "en_US",
        "siteId": 300000001,
        "propertyId": str(hotei_id)
    }
    try:
        response = request_func(method_endswith, payload)
        result = json.loads(response.text)
        parsed = result['data']['propertyInfo']
        data_2 = json.dumps(parsed, indent=3, ensure_ascii=False)
        hotel_images =  parsed['propertyGallery'].get('images')
        if hotel_images is not None:
            photo_links = [info['image'].get('url').replace('{size}', 'w') for info in hotel_images]
            return photo_links
    except Exception:
        logger.exception(Exception)
        return False